import numpy as np
import pandas as pd
import image_processing
import grid_info
import visualization
from utilities import extract_bubbles, generate_random_colors, append_to_file
from bubble_classify import BubbleClassifier
import os
import detect_black_square
def getSubmitResult(input_image_path, input_data, result_txt_path):
    """
    Processes an input image and data to extract grid and bubble information and writes results to a text file.

    :param input_image_path: Path to the input image file.
    :param input_data: Tuple with the format like the txt file [() () () () ()]
    :param result_txt_path: Path to the output results text file.
    """
    
    try:
        # Predefine configurations for sections
        sections = [
            {"name": "SBD", "section_index": (0, 0), "axis": 0, "eps": 0.002, "input_string": "SBD", "gap_string": 0},
            {"name": "MDT", "section_index": (0, 1), "axis": 0, "eps": 0.002, "input_string": "MDT", "gap_string": 0},
            {"name": "phan1_1", "section_index": (1, 0), "axis": 1, "eps": 0.002, "input_string": "1.", "gap_string": 0},
            {"name": "phan1_2", "section_index": (1, 1), "axis": 1, "eps": 0.002, "input_string": "1.", "gap_string": 10},
            {"name": "phan1_3", "section_index": (1, 2), "axis": 1, "eps": 0.002, "input_string": "1.", "gap_string": 20},
            {"name": "phan1_4", "section_index": (1, 3), "axis": 1, "eps": 0.002, "input_string": "1.", "gap_string": 30},
            {"name": "phan2_1", "section_index": (2, 0), "axis": 1, "eps": 0.002, "input_string": "2.1", "gap_string": "a"},
            {"name": "phan2_2", "section_index": (2, 1), "axis": 1, "eps": 0.002, "input_string": "2.2", "gap_string": "a"},
            {"name": "phan2_3", "section_index": (2, 2), "axis": 1, "eps": 0.002, "input_string": "2.3", "gap_string": "a"},
            {"name": "phan2_4", "section_index": (2, 3), "axis": 1, "eps": 0.002, "input_string": "2.4", "gap_string": "a"},
            {"name": "phan2_5", "section_index": (2, 4), "axis": 1, "eps": 0.002, "input_string": "2.5", "gap_string": "a"},
            {"name": "phan2_6", "section_index": (2, 5), "axis": 1, "eps": 0.002, "input_string": "2.6", "gap_string": "a"},
            {"name": "phan2_7", "section_index": (2, 6), "axis": 1, "eps": 0.002, "input_string": "2.7", "gap_string": "a"},
            {"name": "phan2_8", "section_index": (2, 7), "axis": 1, "eps": 0.002, "input_string": "2.8", "gap_string": "a"},
            {"name": "phan3_1", "section_index": (3, 0), "axis": 1, "eps": 0.002, "input_string": "3.1", "gap_string": "none"},
            {"name": "phan3_2", "section_index": (3, 1), "axis": 1, "eps": 0.002, "input_string": "3.2", "gap_string": "none"},
            {"name": "phan3_3", "section_index": (3, 2), "axis": 1, "eps": 0.002, "input_string": "3.3", "gap_string": "none"},
            {"name": "phan3_4", "section_index": (3, 3), "axis": 1, "eps": 0.002, "input_string": "3.4", "gap_string": "none"},
            {"name": "phan3_5", "section_index": (3, 4), "axis": 1, "eps": 0.002, "input_string": "3.5", "gap_string": "none"},
            {"name": "phan3_6", "section_index": (3, 5), "axis": 1, "eps": 0.002, "input_string": "3.6", "gap_string": "none"}
        ]

        # Step 1: Detect nail centers in the image
        centers = detect_black_square.detect_black_square_centers(input_image_path)
        #print("Centers:", centers)
        filename = os.path.basename(input_image_path)
        # Step 2: Extract grid information from nail centers
        gridmatrix = grid_info.getGridmatrix(centers)
        #print("Grid matrix:", gridmatrix)
        gridsection = grid_info.getExtractsections(gridmatrix)
        #print("Grid sections:", gridsection)
        # Step 3: Extract bubble data from input file
        dots = input_data
        #print("Dots:", dots)
        # Step 4: Classify bubbles and write results
        append_to_file(result_txt_path, filename+' ')
        bubble_classifier = BubbleClassifier(gridsection, dots)
        for section in sections:
            bubble_classifier.process_grid_section(
                section_index=section["section_index"],
                axis=section["axis"],
                eps=section["eps"],
                input_string=section["input_string"],
                gap_string=section["gap_string"],
                output_file=result_txt_path
            )
            print(f"Processed {section['name']}...")
        append_to_file(result_txt_path,"\n")

    except Exception as e:
        print(f"Error occurred during processing: {e}")

# Example usage
if __name__ == "__main__":
    input_image_path = "D:\\2_DATA\\IMG_TEST.jpg"
    #input_data = [[0.7482771873474121, 0.25520533323287964, 0.012860310263931751, 0.009695334360003471], [0.7651574015617371, 0.25520533323287964, 0.012860310263931751, 0.009695334360003471], [0.7820376753807068, 0.25520533323287964, 0.012860310263931751, 0.009695334360003471], [0.7313969135284424, 0.28894510865211487, 0.012860310263931751, 0.009695334360003471], [0.7145166397094727, 0.3058149814605713, 0.012860310263931751, 0.009695334360003471], [0.7989179491996765, 0.3058149814605713, 0.012860310263931751, 0.009695334360003471], [0.8746536374092102, 0.187455415725708, 0.011529933661222458, 0.009647730737924576], [0.8573126196861267, 0.23781657218933105, 0.011529933661222458, 0.009647730737924576], [0.8919946551322937, 0.2713906764984131, 0.011529933661222458, 0.009647730737924576], [0.25483813881874084, 0.3811773955821991, 0.014634146355092525, 0.009980958886444569], [0.1673835963010788, 0.3956897258758545, 0.014634146355092525, 0.009980958886444569], [0.12365631759166718, 0.4102020263671875, 0.014634146355092525, 0.009980958886444569], [0.21111086010932922, 0.4247143566608429, 0.014634146355092525, 0.009980958886444569], [0.21111086010932922, 0.4392266571521759, 0.014634146355092525, 0.009980958886444569], [0.25483813881874084, 0.4537389576435089, 0.014634146355092525, 0.009980958886444569], [0.25483813881874084, 0.4682512879371643, 0.014634146355092525, 0.009980958886444569], [0.21111086010932922, 0.4827635884284973, 0.014634146355092525, 0.009980958886444569], [0.25483813881874084, 0.4972759187221527, 0.014634146355092525, 0.009980958886444569], [0.1673835963010788, 0.5117882490158081, 0.014634146355092525, 0.009980958886444569], [0.3786252737045288, 0.3811773955821991, 0.014634146355092525, 0.009980958886444569], [0.42262527346611023, 0.3956897258758545, 0.014634146355092525, 0.009980958886444569], [0.42262527346611023, 0.4102020263671875, 0.014634146355092525, 0.009980958886444569], [0.46662527322769165, 0.4247143566608429, 0.014634146355092525, 0.009980958886444569], [0.46662527322769165, 0.4392266571521759, 0.014634146355092525, 0.009980958886444569], [0.3346252739429474, 0.4537389576435089, 0.014634146355092525, 0.009980958886444569], [0.42262527346611023, 0.4682512879371643, 0.014634146355092525, 0.009980958886444569], [0.3786252737045288, 0.4827635884284973, 0.014634146355092525, 0.009980958886444569], [0.3346252739429474, 0.4972759187221527, 0.014634146355092525, 0.009980958886444569], [0.42262527346611023, 0.5117882490158081, 0.014634146355092525, 0.009980958886444569], [0.5883148312568665, 0.39755237102508545, 0.014634146355092525, 0.0099174864590168], [0.6750421524047852, 0.41197240352630615, 0.014634146355092525, 0.0099174864590168], [0.6316785216331482, 0.44081243872642517, 0.014634146355092525, 0.0099174864590168], [0.5449512004852295, 0.4552324712276459, 0.014634146355092525, 0.0099174864590168], [0.5883148312568665, 0.4696525037288666, 0.014634146355092525, 0.0099174864590168], [0.5883148312568665, 0.4840725064277649, 0.014634146355092525, 0.0099174864590168], [0.5883148312568665, 0.4984925389289856, 0.014634146355092525, 0.0099174864590168], [0.7578935623168945, 0.38112661242485046, 0.015077604912221432, 0.010044430382549763], [0.7578935623168945, 0.39573124051094055, 0.015077604912221432, 0.010044430382549763], [0.7578935623168945, 0.41033583879470825, 0.015077604912221432, 0.010044430382549763], [0.7578935623168945, 0.42494043707847595, 0.015077604912221432, 0.010044430382549763], [0.89152991771698, 0.43954503536224365, 0.015077604912221432, 0.010044430382549763], [0.7578935623168945, 0.45414963364601135, 0.015077604912221432, 0.010044430382549763], [0.89152991771698, 0.46875423192977905, 0.015077604912221432, 0.010044430382549763], [0.8469845056533813, 0.48335883021354675, 0.015077604912221432, 0.010044430382549763], [0.7578935623168945, 0.49796342849731445, 0.015077604912221432, 0.010044430382549763], [0.8469845056533813, 0.5125680565834045, 0.015077604912221432, 0.010044430382549763], [0.16504278779029846, 0.5977943539619446, 0.014634146355092525, 0.010655347257852554], [0.2531372606754303, 0.5977943539619446, 0.014634146355092525, 0.010655347257852554], [0.12099556624889374, 0.6124611496925354, 0.014634146355092525, 0.010655347257852554], [0.16504278779029846, 0.6271278858184814, 0.014634146355092525, 0.010655347257852554], [0.20909002423286438, 0.6271278858184814, 0.014634146355092525, 0.010655347257852554], [0.16504278779029846, 0.6417946815490723, 0.014634146355092525, 0.010655347257852554], [0.20909002423286438, 0.6417946815490723, 0.014634146355092525, 0.010655347257852554], [0.37685897946357727, 0.5976261496543884, 0.014634146355092525, 0.010682323016226292], [0.37685897946357727, 0.6123300790786743, 0.014634146355092525, 0.010682323016226292], [0.4206314980983734, 0.6123300790786743, 0.014634146355092525, 0.010682323016226292], [0.37685897946357727, 0.6270339488983154, 0.014634146355092525, 0.010682323016226292], [0.46440398693084717, 0.6270339488983154, 0.014634146355092525, 0.010682323016226292], [0.33308646082878113, 0.6417378783226013, 0.014634146355092525, 0.010682323016226292], [0.4206314980983734, 0.6417378783226013, 0.014634146355092525, 0.010682323016226292], [0.5876591801643372, 0.5976261496543884, 0.014634146355092525, 0.010682323016226292], [0.675753653049469, 0.5976261496543884, 0.014634146355092525, 0.010682323016226292], [0.5436119437217712, 0.6123300790786743, 0.014634146355092525, 0.010682323016226292], [0.675753653049469, 0.6123300790786743, 0.014634146355092525, 0.010682323016226292], [0.5876591801643372, 0.6270339488983154, 0.014634146355092525, 0.010682323016226292], [0.675753653049469, 0.6270339488983154, 0.014634146355092525, 0.010682323016226292], [0.5436119437217712, 0.6417378783226013, 0.014634146355092525, 0.010682323016226292], [0.7560199499130249, 0.5977943539619446, 0.014634146355092525, 0.010655347257852554], [0.8892605304718018, 0.5977943539619446, 0.014634146355092525, 0.010655347257852554], [0.7560199499130249, 0.6124611496925354, 0.014634146355092525, 0.010655347257852554], [0.8892605304718018, 0.6124611496925354, 0.014634146355092525, 0.010655347257852554], [0.8004334568977356, 0.6271278858184814, 0.014634146355092525, 0.010655347257852554], [0.8448470234870911, 0.6271278858184814, 0.014634146355092525, 0.010655347257852554], [0.8004334568977356, 0.6417946815490723, 0.014634146355092525, 0.010655347257852554], [0.8448470234870911, 0.6417946815490723, 0.014634146355092525, 0.010655347257852554], [0.18060442805290222, 0.8182187676429749, 0.015521064400672913, 0.0117423040792346], [0.13993263244628906, 0.8612582087516785, 0.015521064400672913, 0.0117423040792346], [0.11982093006372452, 0.8895707726478577, 0.015521064400672913, 0.0117423040792346], [0.27831682562828064, 0.7442395687103271, 0.015521064400672913, 0.0117423040792346], [0.29940560460090637, 0.8165625929832458, 0.015521064400672913, 0.0117423040792346], [0.2578915059566498, 0.8457695841789246, 0.015521064400672913, 0.0117423040792346], [0.31986451148986816, 0.8457930088043213, 0.015521064400672913, 0.0117423040792346], [0.3994896411895752, 0.7301200032234192, 0.015521064400672913, 0.0117423040792346], [0.397907018661499, 0.8018350005149841, 0.015521064400672913, 0.0117423040792346], [0.45972535014152527, 0.8165508508682251, 0.015521064400672913, 0.0117423040792346], [0.43858447670936584, 0.8605412244796753, 0.015521064400672913, 0.0117423040792346], [0.41782066226005554, 0.8750454187393188, 0.015521064400672913, 0.0117423040792346], [0.5398682951927185, 0.729892373085022, 0.015521064400672913, 0.0117423040792346], [0.6021788120269775, 0.7604593634605408, 0.015521064400672913, 0.0117423040792346], [0.5597220063209534, 0.817099928855896, 0.015521064400672913, 0.0117423040792346], [0.5385256409645081, 0.8454195261001587, 0.015521064400672913, 0.0117423040792346], [0.5802866816520691, 0.8457411527633667, 0.015521064400672913, 0.0117423040792346], [0.7438130378723145, 0.7897619009017944, 0.015521064400672913, 0.0117423040792346], [0.7015621066093445, 0.803888201713562, 0.015521064400672913, 0.0117423040792346], [0.679787278175354, 0.875074565410614, 0.015521064400672913, 0.0117423040792346], [0.7217391133308411, 0.8752300143241882, 0.015521064400672913, 0.0117423040792346], [0.823428213596344, 0.7752937078475952, 0.015521064400672913, 0.0117423040792346], [0.8652283549308777, 0.8182284235954285, 0.015521064400672913, 0.0117423040792346], [0.8433635830879211, 0.8754072189331055, 0.015521064400672913, 0.0117423040792346], [0.8856074213981628, 0.8897362947463989, 0.015521064400672913, 0.0117423040792346]]
    input_data = extract_bubbles("IMG_1581_iter_1.txt")
    #print("inputdata is",input_data)
    result_txt_path = 'results_test_template.txt'
    
    getSubmitResult(input_image_path, input_data, result_txt_path)
